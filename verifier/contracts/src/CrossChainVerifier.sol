// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import { ISP1Verifier } from "../lib/sp1-contracts/contracts/src/ISP1Verifier.sol";

// Struct to hold the public values that will be exposed after verification.
struct PublicValuesStruct {
    bytes32 messageHash;
    uint32 sourceChainId;
    uint32 destinationChainId;
}

contract CrossChainVerifier {
    // Address of the SP1 verifier contract for zkVM.
    address public verifier;

    // Verification key for the zkVM program that processes cross-chain messages.
    bytes32 public crossChainProgramVKey;

    // Event to log successful proof verification.
    event CrossChainMessageVerified(bytes32 messageHash, uint32 sourceChainId, uint32 destinationChainId);

    // Constructor to initialize the contract with the verifier address and verification key.
    constructor(address _verifier, bytes32 _crossChainProgramVKey) {
        verifier = _verifier;
        crossChainProgramVKey = _crossChainProgramVKey;
    }

    /// @notice Verifies the proof for a cross-chain message.
    /// @param _publicValues The encoded public values (message hash, source chain ID, destination chain ID).
    /// @param _proofBytes The encoded proof generated by the zkVM.
    /// @return messageHash The hash of the message.
    /// @return sourceChainId The source chain ID.
    /// @return destinationChainId The destination chain ID.
    function verifyCrossChainMessageProof(
        bytes calldata _publicValues, 
        bytes calldata _proofBytes
    ) 
        public 
        view 
        returns (bytes32 messageHash, uint32 sourceChainId, uint32 destinationChainId) 
    {
        // Verify the proof using the SP1Verifier contract.
        ISP1Verifier(verifier).verifyProof(crossChainProgramVKey, _publicValues, _proofBytes);

        // Decode the public values to retrieve the message hash, source chain ID, and destination chain ID.
        PublicValuesStruct memory publicValues = abi.decode(_publicValues, (PublicValuesStruct));

        // Emit an event with the verified values (optional).
        // emit CrossChainMessageVerified(publicValues.messageHash, publicValues.sourceChainId, publicValues.destinationChainId);

        // Return the decoded values.
        return (publicValues.messageHash, publicValues.sourceChainId, publicValues.destinationChainId);
    }

    /// @notice A utility function to verify and decode the cross-chain message proof.
    /// @param _publicValues The encoded public values.
    /// @param _proofBytes The proof bytes for verification.
    /// @return messageHash The message hash.
    /// @return sourceChainId The source chain ID.
    /// @return destinationChainId The destination chain ID.
    function decodeAndVerify(
        bytes calldata _publicValues, 
        bytes calldata _proofBytes
    ) 
        external 
        view 
        returns (
            bytes32 messageHash, 
            uint32 sourceChainId, 
            uint32 destinationChainId
        )
    {
        (messageHash, sourceChainId, destinationChainId) = verifyCrossChainMessageProof(_publicValues, _proofBytes);
    }
}